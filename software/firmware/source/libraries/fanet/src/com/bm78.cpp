/*
 * bm78.cpp
 *
 *  Created on: 26 Dec 2016
 *      Author: sid
 */



#include <Arduino.h>

#include "../fanet.h"
#include "../app.h"
#include "serial.h"
#include "bm78.h"

/* BM78 EEprom format
 * (undocumented by Microchip!)
 *
 * request :
 * 0x01 ...
 * * reply:
 * 0x04 0x0E ...
 *
 * todo: length bytes could be excluded
 */
const uint8_t eeprom1_req[] = {0x03, 0x0C, 0x00};
const uint8_t eeprom1_rpl[] = {0x04, 0x01, 0x03, 0x0C, 0x00};
const uint8_t eeprom2_req[] = {0x2D, 0xFC, 0x01, 0x08};
const uint8_t eeprom2_rpl[] = {0x04, 0x01, 0x2D, 0xFC, 0x00};
const uint8_t eeprom3_req[] = {0x27, 0xFC, 0x06, 0x00, 0x07, 0x03, 0x02, 0x03, 0xE0};
const uint8_t eeprom3_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom4_req[] = {0x29, 0xFC, 0x03, 0x00, 0x07, 0x03};
const uint8_t eeprom4_rpl[] = {0x0A, 0x01, 0x29, 0xFC, 0x00, 0x00, 0x07, 0x03, 0x02, 0x03, 0xE0};
const uint8_t eeprom5_req[] = {0x27, 0xFC, 0x23, 0x00, 0x0B, 0x20, 0x53, 0x6B, 0x79, 0x74, 0x72, 0x61, 0x78, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom5_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom6_req[] = {0x29, 0xFC, 0x03, 0x00, 0x0B, 0x20};
const uint8_t eeprom6_rpl[] = {0x27, 0x01, 0x29, 0xFC, 0x00, 0x00, 0x0B, 0x20, 0x53, 0x6B, 0x79, 0x74, 0x72, 0x61, 0x78, 0x78, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom7_req[] = {0x27, 0xFC, 0x04, 0x00, 0x2B, 0x01, 0x10};
const uint8_t eeprom7_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom8_req[] = {0x29, 0xFC, 0x03, 0x00, 0x2B, 0x01};
const uint8_t eeprom8_rpl[] = {0x08, 0x01, 0x29, 0xFC, 0x00, 0x00, 0x2B, 0x01, 0x10};
const uint8_t eeprom9_req[] = {0x27, 0xFC, 0x04, 0x00, 0x31, 0x01, 0x03};
const uint8_t eeprom9_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom10_req[] = {0x29, 0xFC, 0x03, 0x00, 0x31, 0x01};
const uint8_t eeprom10_rpl[] = {0x08, 0x01, 0x29, 0xFC, 0x00, 0x00, 0x31, 0x01, 0x03};
const uint8_t eeprom11_req[] = {0x27, 0xFC, 0x04, 0x00, 0x3B, 0x01, 0x02};
const uint8_t eeprom11_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom12_req[] = {0x29, 0xFC, 0x03, 0x00, 0x3B, 0x01};
const uint8_t eeprom12_rpl[] = {0x08, 0x01, 0x29, 0xFC, 0x00, 0x00, 0x3B, 0x01, 0x02};
const uint8_t eeprom13_req[] = {0x27, 0xFC, 0x05, 0x00, 0x56, 0x02, 0x11, 0x44};
const uint8_t eeprom13_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom14_req[] = {0x29, 0xFC, 0x03, 0x00, 0x56, 0x02};
const uint8_t eeprom14_rpl[] = {0x09, 0x01, 0x29, 0xFC, 0x00, 0x00, 0x56, 0x02, 0x11, 0x44};
const uint8_t eeprom15_req[] = {0x27, 0xFC, 0x13, 0x00, 0x5B, 0x10, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00};
const uint8_t eeprom15_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom16_req[] = {0x29, 0xFC, 0x03, 0x00, 0x5B, 0x10};
const uint8_t eeprom16_rpl[] = {0x17, 0x01, 0x29, 0xFC, 0x00, 0x00, 0x5B, 0x10, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom17_req[] = {0x27, 0xFC, 0x09, 0x01, 0xAD, 0x06, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00};
const uint8_t eeprom17_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom18_req[] = {0x29, 0xFC, 0x03, 0x01, 0xAD, 0x06};
const uint8_t eeprom18_rpl[] = {0x0D, 0x01, 0x29, 0xFC, 0x00, 0x01, 0xAD, 0x06, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00};
const uint8_t eeprom19_req[] = {0x27, 0xFC, 0x05, 0x01, 0xB6, 0x02, 0x03, 0x20};
const uint8_t eeprom19_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom20_req[] = {0x29, 0xFC, 0x03, 0x01, 0xB6, 0x02};
const uint8_t eeprom20_rpl[] = {0x09, 0x01, 0x29, 0xFC, 0x00, 0x01, 0xB6, 0x02, 0x03, 0x20};
const uint8_t eeprom21_req[] = {0x27, 0xFC, 0x0A, 0x01, 0xBA, 0x07, 0x7D, 0x00, 0x0C, 0xFF, 0xFF, 0x01, 0x00};
const uint8_t eeprom21_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom22_req[] = {0x29, 0xFC, 0x03, 0x01, 0xBA, 0x07};
const uint8_t eeprom22_rpl[] = {0x0E, 0x01, 0x29, 0xFC, 0x00, 0x01, 0xBA, 0x07, 0x7D, 0x00, 0x0C, 0xFF, 0xFF, 0x01, 0x00};
const uint8_t eeprom23_req[] = {0x27, 0xFC, 0x05, 0x01, 0xC2, 0x02, 0x00, 0x00};
const uint8_t eeprom23_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom24_req[] = {0x29, 0xFC, 0x03, 0x01, 0xC2, 0x02};
const uint8_t eeprom24_rpl[] = {0x09, 0x01, 0x29, 0xFC, 0x00, 0x01, 0xC2, 0x02, 0x00, 0x00};
const uint8_t eeprom25_req[] = {0x27, 0xFC, 0x0E, 0x01, 0xC5, 0x0B, 0x03, 0x0C, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x02, 0x1F, 0x40};
const uint8_t eeprom25_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom26_req[] = {0x29, 0xFC, 0x03, 0x01, 0xC5, 0x0B};
const uint8_t eeprom26_rpl[] = {0x12, 0x01, 0x29, 0xFC, 0x00, 0x01, 0xC5, 0x0B, 0x03, 0x0C, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x02, 0x1F, 0x40};
const uint8_t eeprom27_req[] = {0x27, 0xFC, 0x15, 0x01, 0xD4, 0x12, 0xBA, 0xB0, 0x00, 0x08, 0x01, 0x90, 0x00, 0x02, 0x02, 0x00, 0x01, 0x00, 0x06,
		0x01, 0x03, 0x00, 0x00, 0x00};
const uint8_t eeprom27_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom28_req[] = {0x29, 0xFC, 0x03, 0x01, 0xD4, 0x12};
const uint8_t eeprom28_rpl[] = {0x19, 0x01, 0x29, 0xFC, 0x00, 0x01, 0xD4, 0x12, 0xBA, 0xB0, 0x00, 0x08, 0x01, 0x90, 0x00, 0x02, 0x02, 0x00, 0x01,
		0x00, 0x06, 0x01, 0x03, 0x00, 0x00, 0x00};
const uint8_t eeprom29_req[] = {0x27, 0xFC, 0x0B, 0x01, 0xEA, 0x08, 0x20, 0x18, 0x10, 0x0B, 0x22, 0x05, 0x05, 0x05};
const uint8_t eeprom29_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom30_req[] = {0x29, 0xFC, 0x03, 0x01, 0xEA, 0x08};
const uint8_t eeprom30_rpl[] = {0x0F, 0x01, 0x29, 0xFC, 0x00, 0x01, 0xEA, 0x08, 0x20, 0x18, 0x10, 0x0B, 0x22, 0x05, 0x05, 0x05};
const uint8_t eeprom31_req[] = {0x27, 0xFC, 0x05, 0x01, 0xF3, 0x02, 0x05, 0x05};
const uint8_t eeprom31_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom32_req[] = {0x29, 0xFC, 0x03, 0x01, 0xF3, 0x02};
const uint8_t eeprom32_rpl[] = {0x09, 0x01, 0x29, 0xFC, 0x00, 0x01, 0xF3, 0x02, 0x05, 0x05};
const uint8_t eeprom33_req[] = {0x27, 0xFC, 0x07, 0x01, 0xF6, 0x04, 0x00, 0x01, 0x01, 0x01};
const uint8_t eeprom33_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom34_req[] = {0x29, 0xFC, 0x03, 0x01, 0xF6, 0x04};
const uint8_t eeprom34_rpl[] = {0x0B, 0x01, 0x29, 0xFC, 0x00, 0x01, 0xF6, 0x04, 0x00, 0x01, 0x01, 0x01};
const uint8_t eeprom35_req[] = {0x27, 0xFC, 0x05, 0x01, 0xFB, 0x02, 0x02, 0x01};
const uint8_t eeprom35_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom36_req[] = {0x29, 0xFC, 0x03, 0x01, 0xFB, 0x02};
const uint8_t eeprom36_rpl[] = {0x09, 0x01, 0x29, 0xFC, 0x00, 0x01, 0xFB, 0x02, 0x02, 0x01};
const uint8_t eeprom37_req[] = {0x27, 0xFC, 0x07, 0x01, 0xFE, 0x04, 0x00, 0x03, 0x02, 0x03};
const uint8_t eeprom37_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom38_req[] = {0x29, 0xFC, 0x03, 0x01, 0xFE, 0x04};
const uint8_t eeprom38_rpl[] = {0x0B, 0x01, 0x29, 0xFC, 0x00, 0x01, 0xFE, 0x04, 0x00, 0x03, 0x02, 0x03};
const uint8_t eeprom39_req[] = {0x27, 0xFC, 0x05, 0x02, 0x03, 0x02, 0x04, 0x02};
const uint8_t eeprom39_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom40_req[] = {0x29, 0xFC, 0x03, 0x02, 0x03, 0x02};
const uint8_t eeprom40_rpl[] = {0x09, 0x01, 0x29, 0xFC, 0x00, 0x02, 0x03, 0x02, 0x04, 0x02};
const uint8_t eeprom41_req[] = {0x27, 0xFC, 0x07, 0x02, 0x06, 0x04, 0x00, 0x01, 0x03, 0x02};
const uint8_t eeprom41_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom42_req[] = {0x29, 0xFC, 0x03, 0x02, 0x06, 0x04};
const uint8_t eeprom42_rpl[] = {0x0B, 0x01, 0x29, 0xFC, 0x00, 0x02, 0x06, 0x04, 0x00, 0x01, 0x03, 0x02};
const uint8_t eeprom43_req[] = {0x27, 0xFC, 0x05, 0x02, 0x0B, 0x02, 0x03, 0x01};
const uint8_t eeprom43_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom44_req[] = {0x29, 0xFC, 0x03, 0x02, 0x0B, 0x02};
const uint8_t eeprom44_rpl[] = {0x09, 0x01, 0x29, 0xFC, 0x00, 0x02, 0x0B, 0x02, 0x03, 0x01};
const uint8_t eeprom45_req[] = {0x27, 0xFC, 0x07, 0x02, 0x0E, 0x04, 0x00, 0x3C, 0x1E, 0x1E};
const uint8_t eeprom45_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom46_req[] = {0x29, 0xFC, 0x03, 0x02, 0x0E, 0x04};
const uint8_t eeprom46_rpl[] = {0x0B, 0x01, 0x29, 0xFC, 0x00, 0x02, 0x0E, 0x04, 0x00, 0x3C, 0x1E, 0x1E};
const uint8_t eeprom47_req[] = {0x27, 0xFC, 0x05, 0x02, 0x13, 0x02, 0x1E, 0x1E};
const uint8_t eeprom47_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom48_req[] = {0x29, 0xFC, 0x03, 0x02, 0x13, 0x02};
const uint8_t eeprom48_rpl[] = {0x09, 0x01, 0x29, 0xFC, 0x00, 0x02, 0x13, 0x02, 0x1E, 0x1E};
const uint8_t eeprom49_req[] = {0x27, 0xFC, 0x23, 0x02, 0x17, 0x20, 0x0A, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6C, 0x50, 0x6F, 0x72, 0x74, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x43, 0x36, 0x50, 0x36, 0x34, 0x4A, 0x32, 0x4D, 0x5A, 0x58, 0x53, 0x6B, 0x79, 0x74, 0x72};
const uint8_t eeprom49_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom50_req[] = {0x29, 0xFC, 0x03, 0x02, 0x17, 0x20};
const uint8_t eeprom50_rpl[] = {0x27, 0x01, 0x29, 0xFC, 0x00, 0x02, 0x17, 0x20, 0x0A, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6C, 0x50, 0x6F, 0x72, 0x74,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x36, 0x50, 0x36, 0x34, 0x4A, 0x32, 0x4D, 0x5A, 0x58, 0x53, 0x6B, 0x79, 0x74, 0x72};
const uint8_t eeprom51_req[] = {0x27, 0xFC, 0x0E, 0x02, 0x37, 0x0B, 0x61, 0x78, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom51_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom52_req[] = {0x29, 0xFC, 0x03, 0x02, 0x37, 0x0B};
const uint8_t eeprom52_rpl[] = {0x12, 0x01, 0x29, 0xFC, 0x00, 0x02, 0x37, 0x0B, 0x61, 0x78, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom53_req[] = {0x27, 0xFC, 0x23, 0x02, 0x52, 0x20, 0x00, 0x39, 0x50, 0x56, 0x01, 0x00, 0x00, 0x01, 0x43, 0x68, 0x61, 0x74, 0x62,
		0x6F, 0x61, 0x72, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x49, 0x53};
const uint8_t eeprom53_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom54_req[] = {0x29, 0xFC, 0x03, 0x02, 0x52, 0x20};
const uint8_t eeprom54_rpl[] = {0x27, 0x01, 0x29, 0xFC, 0x00, 0x02, 0x52, 0x20, 0x00, 0x39, 0x50, 0x56, 0x01, 0x00, 0x00, 0x01, 0x43, 0x68, 0x61,
		0x74, 0x62, 0x6F, 0x61, 0x72, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x49, 0x53};
const uint8_t eeprom55_req[] = {0x27, 0xFC, 0x21, 0x02, 0x72, 0x1E, 0x53, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x42, 0x4D, 0x37, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom55_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom56_req[] = {0x29, 0xFC, 0x03, 0x02, 0x72, 0x1E};
const uint8_t eeprom56_rpl[] = {0x25, 0x01, 0x29, 0xFC, 0x00, 0x02, 0x72, 0x1E, 0x53, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x42, 0x4D, 0x37, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom57_req[] = {0x27, 0xFC, 0x23, 0x02, 0xA0, 0x20, 0x63, 0x6F, 0x6D, 0x2E, 0x69, 0x73, 0x73, 0x63, 0x2E, 0x64, 0x61, 0x74, 0x61,
		0x70, 0x61, 0x74, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom57_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom58_req[] = {0x29, 0xFC, 0x03, 0x02, 0xA0, 0x20};
const uint8_t eeprom58_rpl[] = {0x27, 0x01, 0x29, 0xFC, 0x00, 0x02, 0xA0, 0x20, 0x63, 0x6F, 0x6D, 0x2E, 0x69, 0x73, 0x73, 0x63, 0x2E, 0x64, 0x61,
		0x74, 0x61, 0x70, 0x61, 0x74, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom59_req[] = {0x27, 0xFC, 0x23, 0x02, 0xC0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x63, 0x6F, 0x6D, 0x2E, 0x69, 0x73, 0x73, 0x63, 0x2D, 0x74, 0x65, 0x63, 0x68, 0x00, 0x00, 0x00};
const uint8_t eeprom59_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom60_req[] = {0x29, 0xFC, 0x03, 0x02, 0xC0, 0x20};
const uint8_t eeprom60_rpl[] = {0x27, 0x01, 0x29, 0xFC, 0x00, 0x02, 0xC0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x6F, 0x6D, 0x2E, 0x69, 0x73, 0x73, 0x63, 0x2D, 0x74, 0x65, 0x63, 0x68, 0x00, 0x00, 0x00};
const uint8_t eeprom61_req[] = {0x27, 0xFC, 0x23, 0x02, 0xE0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom61_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom62_req[] = {0x29, 0xFC, 0x03, 0x02, 0xE0, 0x20};
const uint8_t eeprom62_rpl[] = {0x27, 0x01, 0x29, 0xFC, 0x00, 0x02, 0xE0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom63_req[] = {0x27, 0xFC, 0x23, 0x03, 0x00, 0x20, 0x49, 0x53, 0x53, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom63_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom64_req[] = {0x29, 0xFC, 0x03, 0x03, 0x00, 0x20};
const uint8_t eeprom64_rpl[] = {0x27, 0x01, 0x29, 0xFC, 0x00, 0x03, 0x00, 0x20, 0x49, 0x53, 0x53, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom65_req[] = {0x27, 0xFC, 0x23, 0x03, 0x20, 0x20, 0x42, 0x4D, 0x37, 0x38, 0x00, 0x00, 0x01, 0x00, 0x04, 0x09, 0x06, 0x07, 0x08,
		0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom65_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom66_req[] = {0x29, 0xFC, 0x03, 0x03, 0x20, 0x20};
const uint8_t eeprom66_rpl[] = {0x27, 0x01, 0x29, 0xFC, 0x00, 0x03, 0x20, 0x20, 0x42, 0x4D, 0x37, 0x38, 0x00, 0x00, 0x01, 0x00, 0x04, 0x09, 0x06,
		0x07, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom67_req[] = {0x27, 0xFC, 0x23, 0x03, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom67_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom68_req[] = {0x29, 0xFC, 0x03, 0x03, 0x40, 0x20};
const uint8_t eeprom68_rpl[] = {0x27, 0x01, 0x29, 0xFC, 0x00, 0x03, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom69_req[] = {0x27, 0xFC, 0x23, 0x03, 0x60, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom69_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom70_req[] = {0x29, 0xFC, 0x03, 0x03, 0x60, 0x20};
const uint8_t eeprom70_rpl[] = {0x27, 0x01, 0x29, 0xFC, 0x00, 0x03, 0x60, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom71_req[] = {0x27, 0xFC, 0x23, 0x03, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00,
		0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom71_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom72_req[] = {0x29, 0xFC, 0x03, 0x03, 0x80, 0x20};
const uint8_t eeprom72_rpl[] = {0x27, 0x01, 0x29, 0xFC, 0x00, 0x03, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
		0x04, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom73_req[] = {0x27, 0xFC, 0x23, 0x03, 0xA0, 0x20, 0x0D, 0x09, 0x09, 0x53, 0x6B, 0x79, 0x74, 0x72, 0x61, 0x78, 0x78, 0x02, 0x01,
		0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom73_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom74_req[] = {0x29, 0xFC, 0x03, 0x03, 0xA0, 0x20};
const uint8_t eeprom74_rpl[] = {0x27, 0x01, 0x29, 0xFC, 0x00, 0x03, 0xA0, 0x20, 0x0D, 0x09, 0x09, 0x53, 0x6B, 0x79, 0x74, 0x72, 0x61, 0x78, 0x78,
		0x02, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom75_req[] = {0x27, 0xFC, 0x23, 0x03, 0xC0, 0x20, 0x03, 0x02, 0x0A, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom75_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom76_req[] = {0x29, 0xFC, 0x03, 0x03, 0xC0, 0x20};
const uint8_t eeprom76_rpl[] = {0x27, 0x01, 0x29, 0xFC, 0x00, 0x03, 0xC0, 0x20, 0x03, 0x02, 0x0A, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom77_req[] = {0x27, 0xFC, 0x23, 0x03, 0xE0, 0x20, 0x03, 0x02, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom77_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom78_req[] = {0x29, 0xFC, 0x03, 0x03, 0xE0, 0x20};
const uint8_t eeprom78_rpl[] = {0x27, 0x01, 0x29, 0xFC, 0x00, 0x03, 0xE0, 0x20, 0x03, 0x02, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom79_req[] = {0x27, 0xFC, 0x0C, 0x04, 0x00, 0x09, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom79_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom80_req[] = {0x29, 0xFC, 0x03, 0x04, 0x00, 0x09};
const uint8_t eeprom80_rpl[] = {0x10, 0x01, 0x29, 0xFC, 0x00, 0x04, 0x00, 0x09, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t eeprom81_req[] = {0x27, 0xFC, 0x13, 0x04, 0xF0, 0x10, 0x53, 0x6B, 0x79, 0x74, 0x72, 0x61, 0x78, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00};
const uint8_t eeprom81_rpl[] = {0x04, 0x01, 0x27, 0xFC, 0x00};
const uint8_t eeprom82_req[] = {0x29, 0xFC, 0x03, 0x04, 0xF0, 0x10};
const uint8_t eeprom82_rpl[] = {0x17, 0x01, 0x29, 0xFC, 0x00, 0x04, 0xF0, 0x10, 0x53, 0x6B, 0x79, 0x74, 0x72, 0x61, 0x78, 0x78, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00};


typedef struct
{
	const uint8_t *tx;
	const uint8_t *rx;
	const uint16_t tx_len;
	const uint16_t rx_len;
} __attribute__ ((packed)) eeprom_t;

const eeprom_t bm78_eeprom[] =
{
		{eeprom1_req, eeprom1_rpl, sizeof(eeprom1_req), sizeof(eeprom1_rpl)},
		{eeprom2_req, eeprom2_rpl, sizeof(eeprom2_req), sizeof(eeprom2_rpl)},
		{eeprom3_req, eeprom3_rpl, sizeof(eeprom3_req), sizeof(eeprom3_rpl)},
		{eeprom4_req, eeprom4_rpl, sizeof(eeprom4_req), sizeof(eeprom4_rpl)},
		{eeprom5_req, eeprom5_rpl, sizeof(eeprom5_req), sizeof(eeprom5_rpl)},
		{eeprom6_req, eeprom6_rpl, sizeof(eeprom6_req), sizeof(eeprom6_rpl)},
		{eeprom7_req, eeprom7_rpl, sizeof(eeprom7_req), sizeof(eeprom7_rpl)},
		{eeprom8_req, eeprom8_rpl, sizeof(eeprom8_req), sizeof(eeprom8_rpl)},
		{eeprom9_req, eeprom9_rpl, sizeof(eeprom9_req), sizeof(eeprom9_rpl)},
		{eeprom10_req, eeprom10_rpl, sizeof(eeprom10_req), sizeof(eeprom10_rpl)},
		{eeprom11_req, eeprom11_rpl, sizeof(eeprom11_req), sizeof(eeprom11_rpl)},
		{eeprom12_req, eeprom12_rpl, sizeof(eeprom12_req), sizeof(eeprom12_rpl)},
		{eeprom13_req, eeprom13_rpl, sizeof(eeprom13_req), sizeof(eeprom13_rpl)},
		{eeprom14_req, eeprom14_rpl, sizeof(eeprom14_req), sizeof(eeprom14_rpl)},
		{eeprom15_req, eeprom15_rpl, sizeof(eeprom15_req), sizeof(eeprom15_rpl)},
		{eeprom16_req, eeprom16_rpl, sizeof(eeprom16_req), sizeof(eeprom16_rpl)},
		{eeprom17_req, eeprom17_rpl, sizeof(eeprom17_req), sizeof(eeprom17_rpl)},
		{eeprom18_req, eeprom18_rpl, sizeof(eeprom18_req), sizeof(eeprom18_rpl)},
		{eeprom19_req, eeprom19_rpl, sizeof(eeprom19_req), sizeof(eeprom19_rpl)},
		{eeprom20_req, eeprom20_rpl, sizeof(eeprom20_req), sizeof(eeprom20_rpl)},
		{eeprom21_req, eeprom21_rpl, sizeof(eeprom21_req), sizeof(eeprom21_rpl)},
		{eeprom22_req, eeprom22_rpl, sizeof(eeprom22_req), sizeof(eeprom22_rpl)},
		{eeprom23_req, eeprom23_rpl, sizeof(eeprom23_req), sizeof(eeprom23_rpl)},
		{eeprom24_req, eeprom24_rpl, sizeof(eeprom24_req), sizeof(eeprom24_rpl)},
		{eeprom25_req, eeprom25_rpl, sizeof(eeprom25_req), sizeof(eeprom25_rpl)},
		{eeprom26_req, eeprom26_rpl, sizeof(eeprom26_req), sizeof(eeprom26_rpl)},
		{eeprom27_req, eeprom27_rpl, sizeof(eeprom27_req), sizeof(eeprom27_rpl)},
		{eeprom28_req, eeprom28_rpl, sizeof(eeprom28_req), sizeof(eeprom28_rpl)},
		{eeprom29_req, eeprom29_rpl, sizeof(eeprom29_req), sizeof(eeprom29_rpl)},
		{eeprom30_req, eeprom30_rpl, sizeof(eeprom30_req), sizeof(eeprom30_rpl)},
		{eeprom31_req, eeprom31_rpl, sizeof(eeprom31_req), sizeof(eeprom31_rpl)},
		{eeprom32_req, eeprom32_rpl, sizeof(eeprom32_req), sizeof(eeprom32_rpl)},
		{eeprom33_req, eeprom33_rpl, sizeof(eeprom33_req), sizeof(eeprom33_rpl)},
		{eeprom34_req, eeprom34_rpl, sizeof(eeprom34_req), sizeof(eeprom34_rpl)},
		{eeprom35_req, eeprom35_rpl, sizeof(eeprom35_req), sizeof(eeprom35_rpl)},
		{eeprom36_req, eeprom36_rpl, sizeof(eeprom36_req), sizeof(eeprom36_rpl)},
		{eeprom37_req, eeprom37_rpl, sizeof(eeprom37_req), sizeof(eeprom37_rpl)},
		{eeprom38_req, eeprom38_rpl, sizeof(eeprom38_req), sizeof(eeprom38_rpl)},
		{eeprom39_req, eeprom39_rpl, sizeof(eeprom39_req), sizeof(eeprom39_rpl)},
		{eeprom40_req, eeprom40_rpl, sizeof(eeprom40_req), sizeof(eeprom40_rpl)},
		{eeprom41_req, eeprom41_rpl, sizeof(eeprom41_req), sizeof(eeprom41_rpl)},
		{eeprom42_req, eeprom42_rpl, sizeof(eeprom42_req), sizeof(eeprom42_rpl)},
		{eeprom43_req, eeprom43_rpl, sizeof(eeprom43_req), sizeof(eeprom43_rpl)},
		{eeprom44_req, eeprom44_rpl, sizeof(eeprom44_req), sizeof(eeprom44_rpl)},
		{eeprom45_req, eeprom45_rpl, sizeof(eeprom45_req), sizeof(eeprom45_rpl)},
		{eeprom46_req, eeprom46_rpl, sizeof(eeprom46_req), sizeof(eeprom46_rpl)},
		{eeprom47_req, eeprom47_rpl, sizeof(eeprom47_req), sizeof(eeprom47_rpl)},
		{eeprom48_req, eeprom48_rpl, sizeof(eeprom48_req), sizeof(eeprom48_rpl)},
		{eeprom49_req, eeprom49_rpl, sizeof(eeprom49_req), sizeof(eeprom49_rpl)},
		{eeprom50_req, eeprom50_rpl, sizeof(eeprom50_req), sizeof(eeprom50_rpl)},
		{eeprom51_req, eeprom51_rpl, sizeof(eeprom51_req), sizeof(eeprom51_rpl)},
		{eeprom52_req, eeprom52_rpl, sizeof(eeprom52_req), sizeof(eeprom52_rpl)},
		{eeprom53_req, eeprom53_rpl, sizeof(eeprom53_req), sizeof(eeprom53_rpl)},
		{eeprom54_req, eeprom54_rpl, sizeof(eeprom54_req), sizeof(eeprom54_rpl)},
		{eeprom55_req, eeprom55_rpl, sizeof(eeprom55_req), sizeof(eeprom55_rpl)},
		{eeprom56_req, eeprom56_rpl, sizeof(eeprom56_req), sizeof(eeprom56_rpl)},
		{eeprom57_req, eeprom57_rpl, sizeof(eeprom57_req), sizeof(eeprom57_rpl)},
		{eeprom58_req, eeprom58_rpl, sizeof(eeprom58_req), sizeof(eeprom58_rpl)},
		{eeprom59_req, eeprom59_rpl, sizeof(eeprom59_req), sizeof(eeprom59_rpl)},
		{eeprom60_req, eeprom60_rpl, sizeof(eeprom60_req), sizeof(eeprom60_rpl)},
		{eeprom61_req, eeprom61_rpl, sizeof(eeprom61_req), sizeof(eeprom61_rpl)},
		{eeprom62_req, eeprom62_rpl, sizeof(eeprom62_req), sizeof(eeprom62_rpl)},
		{eeprom63_req, eeprom63_rpl, sizeof(eeprom63_req), sizeof(eeprom63_rpl)},
		{eeprom64_req, eeprom64_rpl, sizeof(eeprom64_req), sizeof(eeprom64_rpl)},
		{eeprom65_req, eeprom65_rpl, sizeof(eeprom65_req), sizeof(eeprom65_rpl)},
		{eeprom66_req, eeprom66_rpl, sizeof(eeprom66_req), sizeof(eeprom66_rpl)},
		{eeprom67_req, eeprom67_rpl, sizeof(eeprom67_req), sizeof(eeprom67_rpl)},
		{eeprom68_req, eeprom68_rpl, sizeof(eeprom68_req), sizeof(eeprom68_rpl)},
		{eeprom69_req, eeprom69_rpl, sizeof(eeprom69_req), sizeof(eeprom69_rpl)},
		{eeprom70_req, eeprom70_rpl, sizeof(eeprom70_req), sizeof(eeprom70_rpl)},
		{eeprom71_req, eeprom71_rpl, sizeof(eeprom71_req), sizeof(eeprom71_rpl)},
		{eeprom72_req, eeprom72_rpl, sizeof(eeprom72_req), sizeof(eeprom72_rpl)},
		{eeprom73_req, eeprom73_rpl, sizeof(eeprom73_req), sizeof(eeprom73_rpl)},
		{eeprom74_req, eeprom74_rpl, sizeof(eeprom74_req), sizeof(eeprom74_rpl)},
		{eeprom75_req, eeprom75_rpl, sizeof(eeprom75_req), sizeof(eeprom75_rpl)},
		{eeprom76_req, eeprom76_rpl, sizeof(eeprom76_req), sizeof(eeprom76_rpl)},
		{eeprom77_req, eeprom77_rpl, sizeof(eeprom77_req), sizeof(eeprom77_rpl)},
		{eeprom78_req, eeprom78_rpl, sizeof(eeprom78_req), sizeof(eeprom78_rpl)},
		{eeprom79_req, eeprom79_rpl, sizeof(eeprom79_req), sizeof(eeprom79_rpl)},
		{eeprom80_req, eeprom80_rpl, sizeof(eeprom80_req), sizeof(eeprom80_rpl)},
		{eeprom81_req, eeprom81_rpl, sizeof(eeprom81_req), sizeof(eeprom81_rpl)},
		{eeprom82_req, eeprom82_rpl, sizeof(eeprom82_req), sizeof(eeprom82_rpl)},
};

boolean BM78::write_eeprom()
{
	if(mySerial == NULL)
		return false;

#if defined(SerialDEBUG) && BM78_debug_mode > 0
	SerialDEBUG.println(F("### BM78 basic conf"));
#endif

        /* enter eeprom mode */
        digitalWrite(BM78_NRESET, LOW);
        digitalWrite(BM78_NEEPROM, LOW);
        delay(10);
        digitalWrite(BM78_NRESET, HIGH);
        delay(500);

        /* flash eeprom */
        for(unsigned int i=0; i<sizeof(bm78_eeprom)/sizeof(bm78_eeprom[0]); i++)
        {
        	/* clean inbuffer */
                while(mySerial->available())
                	mySerial->read();

        	/* request */
        	mySerial->write(0x01);
        	for(int k=0; k<bm78_eeprom[i].tx_len; k++)
        		mySerial->write(bm78_eeprom[i].tx[k]);

        	/* reply */
        	for(int k=0; k<1000 && mySerial->available()<bm78_eeprom[i].rx_len+2; k++)
        		delay(1);

        	/* header */
        	if(mySerial->available() < bm78_eeprom[i].rx_len+2 || mySerial->read() != 0x04 || mySerial->read() != 0x0E)
        	{
        		digitalWrite(BM78_NEEPROM, HIGH);
        		return false;
        	}
        	/* payload */
        	for(int k=0; k<bm78_eeprom[i].rx_len; k++)
        		if(mySerial->read() != bm78_eeprom[i].rx[k])
        		{
        			digitalWrite(BM78_NEEPROM, HIGH);
                		return false;
        		}
        }

        /* leave eeprom mode */
        delay(400);
        digitalWrite(BM78_NRESET, LOW);
        delay(10);
        digitalWrite(BM78_NEEPROM, HIGH);
        digitalWrite(BM78_NRESET, HIGH);

        return true;
}

boolean BM78::begin(Stream &port)
{
	mySerial = &port;

	/* pin mode */
	pinMode(BM78_NEEPROM, OUTPUT);
        digitalWrite(BM78_NEEPROM, HIGH);
	pinMode(BM78_NRESET, OUTPUT);
        digitalWrite(BM78_NRESET, HIGH);

        /* enter configuration */
        if(config_mode(true) == false)
        	return false;

        char devname[32];
        if(read_device_name(devname, sizeof(devname)) <= 0)
        	return false;

        /* evaluate name */
        char *sep = strrchr(devname,'-');
        char *id_str = NULL;
        if(sep != NULL)
        {
        	id_str = sep+1;
        	*sep = '\0';
        }

        /* setting name */
#ifdef FANET_NAME_AUTOBRDCAST
        app.set_name(devname);
        app.allow_brdcast_name(true);
#endif

        /* set addr */
        if(id_str != NULL && strlen(id_str) == 4 && isxdigit(id_str[0]) && isxdigit(id_str[1]) && isxdigit(id_str[2]) && isxdigit(id_str[3]))
        {
        	unsigned int fanet_id = strtol(id_str, NULL, HEX);
        	if(fanet_id != 0 && fanet_id < 0xFFFF)
        	{
        	        fmac.my_addr.manufacturer = FANET_MANUFACTURER;
        	        fmac.my_addr.id = fanet_id;
#if defined(SerialDEBUG) && BM78_debug_mode > 0
        	        SerialDEBUG.print(F("### BM78 fanet id "));
        	        SerialDEBUG.println(fanet_id, HEX);
#endif
        	}
        }

        /* leaving configuration mode */
        if(config_mode(false) == false)
        	return false;

        return true;
}

BM78::BM78()
{

}

/* warning: the timeout upon entering is still running */
boolean BM78::config_mode(boolean enter)
{
#if defined(SerialDEBUG) && BM78_debug_mode > 0
	SerialDEBUG.println(F("### BM78 config"));
#endif
	if(mySerial == NULL)
		return false;

        uint8_t buf[8];

        if(enter)
	{
		/* enter */

	        /* reset */
	        digitalWrite(BM78_NRESET, LOW);
	        delay(10);
	        digitalWrite(BM78_NRESET, HIGH);

	        /* search for configure mode */
	        if(receive(buf, sizeof(buf), 700) != 2 || buf[0] != BM78_Configure_Mode_Status || buf[1] != 1)
	        {
#ifndef FANET_BLUETOOTH_ENDUSER_SAVE
	        	/* configuration mode may be disabled -> enable configuration mode */
	        	for(int i=0; i<3 && write_eeprom() == false; i++)
	        		delay(500);
#endif
	        	/* second try */
	        	if(receive(buf, sizeof(buf), 700) != 2 || buf[0] != BM78_Configure_Mode_Status || buf[1] != 1)
	        		return false;
	        }
	}
	else
	{
		/* leave */
	        buf[0] = BM78_Leave_Configure_Mode;
	        buf[1] = 0;	//NOT forever
	        if(transmitt(buf, 2) == false)
	        	return false;

	        /* Reply */
	        if(receive(buf, sizeof(buf), 700) != 2 || buf[0] != BM78_Configure_Mode_Status || buf[1]  != 0)
	        	return false;
	}

        return true;
}

int BM78::read_device_name(char *name, int length)
{
#if defined(SerialDEBUG) && BM78_debug_mode > 0
	SerialDEBUG.println(F("### BM78 read devname"));
#endif
	uint8_t buf[32];

	/* Request */
        buf[0] = BM78_Read_Device_Name;
        if(transmitt(buf, 1) == false)
        	return -1;

        /* Reply */
        unsigned int rxc = receive(buf, sizeof(buf), 500);
        if(rxc < 4 || buf[0] != BM78_Command_Complete || buf[1]  != BM78_Read_Device_Name || buf[2] != BM78_Command_succeeded)
        	return -1;
        buf[min(rxc, sizeof(buf)-1)] = '\0';

        return snprintf(name, length, (const char *)&buf[3]);
}

boolean BM78::write_device_name(char *name, boolean permanent)
{
#if defined(SerialDEBUG) && BM78_debug_mode > 0
	SerialDEBUG.println(F("### BM78 write devname"));
#endif

	/* Request */
	uint8_t buf[32];
	int namelen = min(sizeof(buf)-2, strlen(name));
	buf[0] = BM78_Write_Device_Name;
	buf[1] = !!permanent;
	memcpy(&buf[2], name, namelen);
	if(transmitt(buf, namelen+2) == false)
        	return false;

	/* Reply */
        if(receive(buf, sizeof(buf), 500) != 3 ||
        		buf[0] != BM78_Command_Complete || buf[1] != BM78_Write_Device_Name || buf[2] != BM78_Command_succeeded)
        	return false;

        /* also write name to LE adv data */
        return write_name_to_adv_data(name, permanent);
}

uint8_t BM78::crc(uint8_t *data, unsigned int length)
{
	/* sum up all data (incl 16bit length) */
	uint32_t sum = (length>>8)&0xFF;
	sum += length&0xFF;

	for(unsigned int i=0; i<length; i++)
		sum += data[i];

	/* getting rest */
	return (0xFFFFFF00 - sum) & 0xFF;
}

boolean BM78::transmitt(uint8_t *data, unsigned int length)
{
	if(mySerial == NULL)
		return false;

	/* header */
	unsigned int tx = mySerial->write(BM78_SYNC);
	tx += mySerial->write(length>>8);
	tx += mySerial->write(length&0xFF);

	/* data */
	tx += mySerial->write(data, length);

	/* crc */
	tx += mySerial->write(crc(data, length));

#if defined(SerialDEBUG) && BM78_debug_mode > 1
	SerialDEBUG.print(F("### BM78 tx: "));
	SerialDEBUG.print(BM78_SYNC, HEX);
	SerialDEBUG.print(F(" "));
	SerialDEBUG.print(length>>8, HEX);
	SerialDEBUG.print(F(" "));
	SerialDEBUG.print(length&0xFF, HEX);
	SerialDEBUG.print(F(" "));
	for(unsigned int i=0; i<length; i++)
	{
		SerialDEBUG.print(data[i], HEX);
		SerialDEBUG.print(F(" "));
	}
	SerialDEBUG.print(crc(data, length), HEX);
	SerialDEBUG.println();
#endif

	if(tx == length + 4)
		return true;
	else
		return false;
}

int BM78::rx(uint8_t *data, unsigned int length, unsigned int *timeout_ms)
{
	if(mySerial == NULL)
		return -1;

	int pos = 0;
	while(length)
	{
		/* wait for sync word */
		if(mySerial->available())
		{
			data[pos++] = mySerial->read();
			length--;

#if defined(SerialDEBUG) && BM78_debug_mode > 1
			SerialDEBUG.print(F("### BM78 rx: "));
			SerialDEBUG.print(data[pos-1], HEX);
			SerialDEBUG.println();
#endif
			continue;
		}

		/* time is up */
		if(*timeout_ms-- == 0)
			return -1;
		delay(1);
	}

	return pos;
}

unsigned int BM78::receive(uint8_t *data, unsigned int buf_length, unsigned int timeout_ms)
{
	if(mySerial == NULL)
		return 0;

	/* start */
	while(1)
	{
		/* wait for sync word */
		if(mySerial->available())
		{
			if(mySerial->read() == BM78_SYNC)
				break;
			else
				continue;
		}


		/* time is up */
		if(timeout_ms-- == 0)
			return 0;
		delay(1);
	}

	/* length */
	uint8_t buf[2];
	unsigned int length;
	if(rx(buf, 2, &timeout_ms) < 2)
		return 0;
	length = (buf[0]<<8) | buf[1];
#if defined(SerialDEBUG) && BM78_debug_mode > 1
	SerialDEBUG.print(F("### BM78 rx'ing "));
	SerialDEBUG.println(length, HEX);
#endif
	/* receive data */
	int rxc = rx(data, min(length, buf_length), &timeout_ms);
	if(buf_length < length || rxc < (int)length)
		return 0;

	/* receive crc */
	if(rx(buf, 1, &timeout_ms) != 1 || buf[0] != crc(data, length))
		return 0;

	return rxc;
}

boolean BM78::write_name_to_adv_data(char *name, boolean permanent)
{
#if defined(SerialDEBUG) && BM78_debug_mode > 0
	SerialDEBUG.println(F("### BM78 name2adv"));
#endif

	/* Request */
	uint8_t buf[33];
	int namelen = min(sizeof(buf)-7, strlen(name));
	buf[0] = BM78_Write_Adv_Data;
	buf[1] = !!permanent;
	/* advertising data */
	buf[2] = namelen+1;		//length
	buf[3] = 0x09;			//type Device Name
	memcpy(&buf[4], name, namelen);
 	buf[4+namelen] = 2;		//length
	buf[5+namelen] = 0x01;		//type Flags
	buf[6+namelen] = 0x02;		//	Discoverable
	if(transmitt(buf, namelen+7) == false)
        	return false;

	/* Reply */
        if(receive(buf, sizeof(buf), 500) != 3 ||
        		buf[0] != BM78_Command_Complete || buf[1] != BM78_Write_Adv_Data || buf[2] != BM78_Command_succeeded)
        	return false;

        return true;
}
boolean BM78::write_id(int id)
{
#if defined(SerialDEBUG) && BM78_debug_mode > 0
	SerialDEBUG.println(F("### BM78 write id"));
#endif

        if(config_mode(true) == false)
        	return false;

        char devname[32];
        if(read_device_name(devname, sizeof(devname)) <= 0)
        {
        	config_mode(false);
        	return false;
        }

        /* evaluate name */
        char *sep = strrchr(devname, '-');
        if(sep != NULL && strlen(sep+1) == 4 && isxdigit(sep[1]) && isxdigit(sep[2]) && isxdigit(sep[3]) && isxdigit(sep[4]))
        	*sep = '\0';

        /* ensure device name */
        char btname[32];
       	snprintf(btname, sizeof(btname), "%.10s-%04X", devname, id);

        if(sep)
        	*sep = '-';

        /* compare dev names, write id to BM78 and set global fanet id*/
        if(strcmp(devname, btname) != 0 && write_device_name(btname, true))
        {
        	fmac.my_addr.manufacturer = FANET_MANUFACTURER;
        	fmac.my_addr.id = id;
        }

        /* leaving configuration mode */
        if(config_mode(false) == false)
        	return false;

	return true;
};

boolean BM78::write_name(char *name)
{
#if defined(SerialDEBUG) && BM78_debug_mode > 0
	SerialDEBUG.println(F("### BM78 write name"));
#endif

        if(config_mode(true) == false)
        	return false;

        char devname[32];
        if(read_device_name(devname, sizeof(devname)) <= 0)
        {
        	config_mode(false);
        	return false;
        }

        /* evaluate name */
        char *sep = strrchr(devname, '-');
        char *id_str = NULL;
        if(sep != NULL)
        {
        	id_str = sep+1;
        	*sep = '\0';
        }

        /* set addr */
        unsigned int fanet_id = 0;
        if(id_str != NULL && strlen(id_str) == 4 && isxdigit(id_str[0]) && isxdigit(id_str[1]) && isxdigit(id_str[2]) && isxdigit(id_str[3]))
        	fanet_id = strtol(id_str, NULL, HEX);

        /* ensure device name */
        char btname[32];

        /* name is only written in case of a valid fanet id */
        if(fanet_id > 0 && fanet_id < 0xFFFF)
        {
        	snprintf(btname, sizeof(btname), "%.10s-%04X", name, fanet_id);

        	if(sep)
                	*sep = '-';

                /* compare dev names */
                if(strcmp(devname, btname) != 0)
                	write_device_name(btname, true);
        }


        /* leaving configuration mode */
        if(config_mode(false) == false)
        	return false;

        return true;
};

void BM78::end()
{
        digitalWrite(BM78_NRESET, LOW);
        pinMode(BM78_NEEPROM, INPUT);
        //todo remove power???

        mySerial = NULL;
}

#ifdef FANET_BLUETOOTH
	BM78 bm78 = BM78();
#endif
